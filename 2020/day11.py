# region input_string
input_string = '''LLLLLLLLLLLLLLL.L..LLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLL.LLLLLLLLL.LLLL...LLLLLLLLLLL
LLLLLL.LLL.LLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LL.LLLLLL..LLLLLLL.LLLLL.LLLL.LLLLLLLLLLLLL
LLLLL.LL.LLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLL.LLLLLLLLLLLLL
.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLL..LLLLLLL.L.LLLLLLLLLLLLLLLLLLL.LL.LLLLLLLLLL.LLLLLLLLLLLLL
.LL.LLLL..LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LL.LLLLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.L.LLLL.LLLLLLLLL...LLL.LL.L.LLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLL.LL.L
LLL.LLLL.LLLLLLLLL.LLLLLL.LLLL.LLLL.LLLLLLLL..LLLL.LLLLLLLLL.LLLLLLLLLLLL.L.LLLL.LLLLLLLLLLLLL
.LLLLLLL.LLLLLLL.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.L..LLLLLLL.LLLLLLLLLLLLL
..L......L.L..L.LL.LL....L......L.L.L..LL....L............L..L.LLL..L..LL.LL...............L..
LLLL.LLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLLLLL.LLL.LLLLL.L.LLLL.LL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.L..LLLLLL..LLLLLLLL.LLLLLLLLLLL.LLL.LLLLL.LLL.LLLL.LLLLLLLLL
LLLLLLLLLLLLLLL.LL.LLLLLL.LLLL.LLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LL.L..LLLLLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LL.LLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLL.L.LLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL..LLLLL.LLL.LLLLLLLLLLLL.L
LLLLLLLL.LLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LL.LLLLLL.LL.LLL.LLLL.LLLLLLLLLL.LLLLLLLLLL.LL
LL.LLLLLLLLLLLLLL..LLLLLL.LLLLLLLLLLLLLLLLLL.LLL.L.LLLLLLLLLLLLLLLL.LL.LLLL.LLLL.LLLL.LLLLLLLL
..L......L....L...L..LLL..L.LL.....LLL.LL.L..LLLLLL...L.LL.LL...L....L..LLL.LLL..L...L........
LLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL.LL.LLLLL.LLLLLLLLLL.LL.LL.LLLLLLL
LLLLLLLL.LLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLL.LLL.LLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLL
L.LLLLLLLLLLLLLLLL.L.LLLL.LLLLLLL.L.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLL.L.LLLLLL.LL.LL.LLLL.LLLLLLLLLLLLL
LL...........L..L.....L..L.....L......L..L.LL.L....LL..L.L...L..LLLL....LL.LL.......LLL......L
LLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LL.LLLLLLLLLLL..LLL.LLLLLLLLLLLLL
LLLLLLLLLLLLLLLLLLLL.LLLL.LLLL.LLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLL
LLLL.LLL.LLL.LLLLLLLLLL.L..LL.LLLLLLLLLLLLLL.LLL.L.L.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLL.LLLLLLLL.L.LLLL.LLLLLLLLLL.LL
LLLLLLL.LLLLLLLLLL.LLLLLL.LLLLLLLL..LLLLLLL..LLLLLL.LLLLLLLLLLLLLLL.L.LLLLLLLLLL..LLLLLLLLLLLL
.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.L.LLL.LLLLLLLLLLLLLLLLLL
LLLLLLLL.L.LLLLLL.LLLLLLLLLLLL.LLLL..LLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLL.LLLL.LLLLL.LLLLLLLLLLLL
L.L..LLLL..L...L.L..L..L.LL.L..L....LL.L...L..L.L.LL......LLL.L.L..L.......L...LL...LLLL....L.
LL.LLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLL.LL.L..LLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL
.LLLLLLLLLLLLLLLLL..LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL..LLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL
LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLLL.LLLLLLLL.LL..LLLLLLLLL.L.LLLLLLLLLLLLLLLLLL
LLLLLLLL..LLLLLLLL.LLL.LL.LLLLLLLLL.LLLLLLLL.LL.LL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLL.LLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL..LLLLLL..LLLLLLLL.LLLLLLLL..LLLL..LLLLLLLL.L.LLLLLL.L.LLLLLLLL.LLLLLLLLLLLLL
L.LL...LL..L......L..L..L..L.LL...LL...L....LL..L..........L..L.L.LL.L......L.........L.L.L...
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL.LLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLL.LLLLLLLL.LLLL
LLLLLLLLLLLLLLLLL.LLL.LLLLLLLLLLLL..LL.LLL.LLLLLLLLLLLLLLLLL.LLL.L.LL.LLLLLLLLLL.LLLLLLLLLLLLL
LLLLLLL..LLLLLLLLL.LLL.LL.LLLLLLLLL.LLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LL.L.LLLL.LLLLLLLL
LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLL.LLLLLLLL..LLLLL.LLLLLLLLL.LLLLLLLL.L.LLL.LLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLLLLLLL...LLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL..LLL.LLLLLLLLLL.LLL.LLLLLLLLLLLLLL
LLLLL.LL.LLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLL.LLLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LL.LLLLL.LLLL.LLLLLLL.LLLLLLLLLLL.LLLL.LLLLL.LLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLL.L.LLLL.LLL..LL.LLLLLLLLLL..LLLLLLLLLLLLLLLLLL
.L.L..LL....L.LLLL.....LL.L...L.L..LL..LL........LL..L.L..L....L.LLL....L..L.L..L.LL..L.....L.
LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLL.LL.LLLLLLLLLL.LLLLLLLL.LLLL..LLLL.LLLLL.LLLL.LL
LLLLLLLL.LLLLL.L.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LL.L.LLLLLLLL.LLLL
LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLL.LLLLL.LLLL.LLLLLLLLLLL.L
LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLL.LLL.LLLLL.LLL..LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLL.L.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLL.LLLLLLLLLLLLLL.LLLLLLLLLL.LLLLLLL
LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.L.LLLLLLLLLLLLL.LLLLLLLL.LL.LL.LLLLLLLLLLLL
LLLLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLL
LL.LL..L.LL.....LL..L.LLLL..........L.....L.L..LL..LLLL....L.........L.L...L...L....L...LL...L
LLLLLLLL.LLLLLLLL..LLLLL..LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLL..LLL..LLLLLLLLLLLL
LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.L.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LL.L.L.LLLLLLLLLLL
LLLLLLLLL.LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL..LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLL
L.LLLLLL.LLLL.LLLL.LLLLLL.LLLLLLLLL.LL.LLLLL.LLLLL.LLLLLLLLL.LLL.LLL.LLLL.LLLLLL.LLLLLLLLLLLLL
....L........L.....L.L.............L.L..L..LLLL.......L......LL.........L....L...L.LL..LL.LL.L
LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL..LLLLLLL.LLLLL.LLLL.LLLLLLLLLL.LL
LLLLLLLL.LLLLLLL.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL.L.LLLLLLLLLLLL.LLLL.LLLLLLLLLL.LL
LLLLLLLLLLLLLLLL.L.LLLLLL..LLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLL..LLLLLLLL.LLLLL.LLL.LLLLLLLLLLLLLL
LLLL.LLL.L.LLLLLLL.LLLLL.LLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL
.L..LL.LL...LLL..L..L..L.L..LL......LLLL......L...LLL...L..L...LL....LL....LL.LLLLL...L.L.L..L
LLLLLLLL.LLL.LLLLL.LLL.LL.L.LLLLLLL.LLLLLLL.LL.LLLLLLLLLLLLL.LLLLLLLLLL.LLL.LLLL.LLLLLLLLLLLL.
LL.LLL.L...LLLLL.L.LLLL.L.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.L.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLL.LLLL.LL.L.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLL.LLLLL.LL.LLLLLL.LLLLLL.LLLLLLLLLL.LLL
LL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLL.LLLLL..LLLLLL
LLLLLLLL..LLLLLLL..LLLL.L.LLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.L.LLL..LLL.LLLLLLLLLLLL.
LLLLLLL..LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL
LLLLLLL..LLLLL.LLL.LLLLLL.LLLLLLLLL..LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLL.LLLLLLLL.LLLLL
LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL..LLL.LLLLLLLLLLLLL
LLLLLLLLLLLLLLLLLL.LL.LLLLLLL.LLLLL.L.LLLLLLLLLLL..LLLLL.LLL.LLLLLLLL.LLLLLLLLLL.LLLLLLLLLL.LL
.....LLL..L..L...LL..L.LL.LLLL....L.L.LL.L.L......LLLL..L..LL.L......L.LL.....L...L...L..LLL..
.LLLLLLL.LLLLLLLLLLLLLL.L.LLLLLLLLL.LLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LL.LLLLL.LLLL.LLLLLLLLLLLLL
LLLL.LLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.L.LLL.L.LLLLLLLLLLLLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLL..LLLLLL.LLLLLLLLL.LLLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLL.LLL.LLLLL.LLLLLLLLLLLL
LLLLLLLL.LLLLL.LLL.LLLLLLLLLLLLLL.L.LLLLLLLL.L.LLLLLL.LLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LL.LL.LL.LLLLLLLLLLLL.LL
LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.L.LL.LLLLLLLLLLLLL
L.L.L.......L.LLL.L.L..L.LLL.L..L...LLLL.L.L.....L...L..L........L...LL...L..L...LLLL..L..L...
LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLL.LLLLLLL..LLLLLLLLLLLLL.LLLLL..LLL
LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLL.LLL..LLL.LLLLLLL.LLLLL
LLLLL.LL.LLLL.LL.L.LLL.LL.LLLL.LLLL.LLLLLLLL.LLLLL.LLLLLL.LL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLL.LLLLLL.L.LLLLLLLLLL.LLLLLLLLLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLL.LLL.L.LLLL.LLLLLLLLLLLLL
.LLLLL.L.LLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLL.L.LLLLLLLL.LLLLLLL.L.LLL.LLLLLLLLLLL.LLLLLL
LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL
LLLLLLLL..LLLLLLLL.LLLLL..LL.LLLLLL.LLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL..LLL.LLLLLLLLLLLLL'''
test = '''L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL'''
# endregion


def cycle_fp(seats):
    copied = [[val for val in row] for row in seats]
    xmax, ymax = len(seats[0]), len(seats)
    dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1),
            (0, 1), (1, -1), (1, 0), (1, 1)]
    for y, row in enumerate(seats):
        for x, seat in enumerate(row):
            crowded = 0
            for i, j in dirs:
                if 0 <= x + i and x + i < xmax and 0 <= y + j and y + j < ymax:
                    crowded += 1 if seats[y + j][x + i] == '#' else 0

            if seat == 'L' and crowded == 0:
                copied[y][x] = '#'
            elif seat == '#' and crowded > 3:
                copied[y][x] = 'L'
    return copied


def first_part(input_data=input_string):
    seats = [[char for char in line] for line in input_data.split('\n')]
    res = None
    while res != seats:
        res = seats
        seats = cycle_fp(seats)
    return sum([sum([1 for val in row if val == '#']) for row in seats])


def cycle_sp(seats):
    copied = [[val for val in row] for row in seats]
    xmax, ymax = len(seats[0]), len(seats)
    dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1),
            (0, 1), (1, -1), (1, 0), (1, 1)]
    for y in range(ymax):
        for x, seat in enumerate(seats[y]):
            crowded = 0
            for i, j in dirs:
                dx, dy = x + i, y + j
                while 0 <= dx and dx < xmax and 0 <= dy and dy < ymax:
                    if seats[dy][dx] != '.':
                        crowded += 1 if seats[dy][dx] == '#' else 0
                        break
                    dx, dy = dx + i, dy + j

            if seat == 'L' and crowded == 0:
                copied[y][x] = '#'
            elif seat == '#' and crowded > 4:
                copied[y][x] = 'L'
    return copied


def second_part(input_data=input_string):
    seats = [[char for char in line] for line in input_data.split('\n')]
    res = None
    cont = 0
    while res != seats:
        cont += 1
        res = seats
        seats = cycle_sp(seats)
    print(cont)
    return sum([sum([1 for val in row if val == '#']) for row in seats])


if __name__ == '__main__':
    print('First part: %d' % first_part())
    print('Second part: %d' % second_part())
